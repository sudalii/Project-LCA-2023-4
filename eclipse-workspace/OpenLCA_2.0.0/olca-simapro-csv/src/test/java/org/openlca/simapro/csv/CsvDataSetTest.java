package org.openlca.simapro.csv;

import static org.junit.Assert.*;

import org.junit.Test;
import org.openlca.simapro.csv.enums.ProcessCategory;
import org.openlca.simapro.csv.enums.ProcessType;
import org.openlca.simapro.csv.enums.Status;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.text.SimpleDateFormat;

public class CsvDataSetTest {

  @Test
  public void testFileSave() throws IOException {
    var file = Files.createTempFile("olca_sp", "CSV").toFile();

    var csv = Tests.testDataSet("process.csv");
    try (var writer = new FileWriter(file, SimaProCsv.defaultCharset())) {
      csv.write(new CsvBuffer(writer, csv.header()));
    }

    var copy = SimaProCsv.read(file);
    assertEquals(1, copy.processes().size());
    var p = copy.processes().get(0);
    assertEquals("298f6b5c-46f5-11ec-81d3-0242ac130003", p.platformId());
    assertEquals("24.02.2014", new SimpleDateFormat("dd.MM.yyyy").format(p.date()));
    assertEquals("Test process", p.name());
    assertEquals(ProcessCategory.MATERIAL, p.category());
    assertEquals("DefaultX25250700002", p.identifier());
    assertEquals(ProcessType.UNIT_PROCESS, p.processType());
    assertEquals(Status.DRAFT, p.status());
    assertEquals(Boolean.FALSE, p.infrastructure());
    assertEquals("data entry by: [System]", p.record());
    assertEquals("generated by: [System]", p.generator());
    assertEquals("text for collection method", p.collectionMethod());
    assertEquals("text for data treatment", p.dataTreatment());
    assertEquals("text for verification", p.verification());
    assertEquals("text for comment", p.comment());
    assertEquals("text for allocation rules", p.allocationRules());
    assertEquals("text for allocation rules", p.allocationRules());

    Files.delete(file.toPath());
  }

}
