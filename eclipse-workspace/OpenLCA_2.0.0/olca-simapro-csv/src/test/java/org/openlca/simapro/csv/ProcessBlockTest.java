package org.openlca.simapro.csv;

import java.text.SimpleDateFormat;

import org.junit.Test;
import org.openlca.simapro.csv.enums.ProcessCategory;
import org.openlca.simapro.csv.enums.ProcessType;
import org.openlca.simapro.csv.enums.Status;

import static org.junit.Assert.*;

public class ProcessBlockTest {

  private final CsvDataSet ds = Tests.testDataSet("process.csv");

  @Test
  public void testProcessBlock() {
    assertEquals(1, ds.processes().size());
    var process = ds.processes().get(0);
    assertEquals("298f6b5c-46f5-11ec-81d3-0242ac130003", process.platformId());
    assertEquals("24.02.2014", new SimpleDateFormat("dd.MM.yyyy").format(process.date()));
    assertEquals("Test process", process.name());
    assertEquals(ProcessCategory.MATERIAL, process.category());
    assertEquals("DefaultX25250700002", process.identifier());
    assertEquals(ProcessType.UNIT_PROCESS, process.processType());
    assertEquals(Status.DRAFT, process.status());
    assertEquals(false, process.infrastructure());
    assertEquals("data entry by: [System]", process.record());
    assertEquals("generated by: [System]", process.generator());
    assertEquals("text for collection method", process.collectionMethod());
    assertEquals("text for data treatment", process.dataTreatment());
    assertEquals("text for verification", process.verification());
    assertEquals("text for comment", process.comment());
    assertEquals("text for allocation rules", process.allocationRules());
    assertEquals("text for allocation rules", process.allocationRules());
  }

  @Test
  public void testLiteratureRow() {
    assertEquals(1, ds.processes().size());
    var process = ds.processes().get(0);
    assertEquals(1, process.literatures().size());
    var literature = process.literatures().get(0);
    assertEquals("Ecoinvent 3", literature.name());
    assertEquals("is copyright protected: false", literature.comment());
  }

  @Test
  public void testProductOutputRow() {
    assertEquals(1, ds.processes().size());
    var process = ds.processes().get(0);
    assertEquals(1, process.products().size());
    var product = process.products().get(0);
    assertEquals("my product", product.name());
    assertEquals("", product.comment());
    assertEquals(0.5, product.amount().value(), 0.0001);
    assertEquals("Agricultural", product.category());
    assertEquals(100, product.allocation().value(), 0.0001);
    assertEquals("kg", product.unit());
    assertEquals("not defined", product.wasteType());
  }

  @Test
  public void testTechExchangeRow() {
    assertEquals(1, ds.processes().size());
    var process = ds.processes().get(0);
    assertEquals(1, process.avoidedProducts().size());
    var avoidedProduct = process.avoidedProducts().get(0);
    assertEquals("Wool, at field/US", avoidedProduct.name());
    assertEquals("", avoidedProduct.comment());
    assertEquals(1, avoidedProduct.amount().value(), 0.0001);
    assertTrue(avoidedProduct.uncertainty().isUndefined());
  }
}
